@startuml data-lib

!include http://host.docker.internal:6250/constants_lib.puml
!include http://host.docker.internal:6250/utils_lib.puml

!$version = "v2.0.1"
!$last_updated = "9/1/2022"

' CHANGELOG
' v2.0.1
' 9/1/2022
' Tweaked data rendering

' v2.0.0
' 8/31/2022
' Rebuilt how data renders

' v1.0.0
' 8/11/2022


!procedure PrimaryKey($name, $type)
    {field}<color:$PRIMARY_KEY><&key></color> <b>$name</b> : $type
!endprocedure

!procedure ForeignKey($name, $type)
    {field}<color:$FOREIGN_KEY><&key></color> <b>$name</b> : $type
!endprocedure

!procedure NewForeignKey($name, $type)
    {field}<color:$NEW_FOREIGN_KEY><&key> <b>$name</b></color> : $type
!endprocedure

!procedure LegacyForeignKey($name, $type)
    {field}<color:$LEGACY_FOREIGN_KEY><&key> <b>$name</b></color> : $type
!endprocedure

' SQL
!procedure Schema($name)
    package "Schema: $name" <<Frame>>
!endprocedure

!procedure Table($name)
    set separator none
    class $name << (T, $TABLE) >> #header:$removeColorHash($TABLE)
!endprocedure

!procedure View($name)
    set separator none
    class $name << (V, $VIEW) >> #header:$removeColorHash($VIEW)
!endprocedure

!procedure LegacyTable($name)
    set separator none
    class $name << (T, $LEGACY_TABLE) >> #header:$removeColorHash($LEGACY_TABLE)
!endprocedure

!procedure Column($name, $type)
    {field}<color:$COLUMN><&media-record></color> <b>$name</b> : $type
!endprocedure

!procedure NewColumn($name, $type)
    {field}<color:$NEW_COLUMN><&media-record> <b>$name</b></color> : $type
!endprocedure

!procedure UNIQUE($field1, $field2="", $field3="", $field4="")
    {field}<color:$INDEX><&magnifying-glass></color> <b>UNIQUE: $field1 $field2 $field3 $field4</b>
!endprocedure

!procedure Index($field1, $field2="", $field3="", $field4="")
    {method}<color:$INDEX><&magnifying-glass></color> <b>$field1 $field2 $field3 $field4</b>
!endprocedure

!procedure NewIndex($field1, $field2="", $field3="", $field4="")
    {method}<color:$NEW_INDEX><&magnifying-glass> <b>$field1 $field2 $field3 $field4</b></color>
!endprocedure


!procedure Method($name, $type="")
    !if ($type == "")
        {method}<color:$METHOD><&caret-right></color> <b>$name()</b>
    !else
        {method}<color:$METHOD><&caret-right></color> <b>$name()</b> : $type
    !endif
!endprocedure

!procedure Function($name, $type="")
    !if ($type == "")
        {method}<color:$FUNCTION><&caret-right></color> <b>$name()</b>
    !else
        {method}<color:$FUNCTION><&caret-right></color> <b>$name()</b> : $type
    !endif
!endprocedure

' NoSQL
!procedure Collection($name)
    class $name << (C, $COLLECTION) >> #header:$removeColorHash($COLLECTION)
!endprocedure

' This is to help distinguish sub documents from collections
!procedure SubDocument($name)
    class $name << (S, $SUB_DOCUMENT) >> #header:$removeColorHash($SUB_DOCUMENT)
!endprocedure

!procedure Field($name, $type)
    {field}<color:$FIELD><&media-record></color> <b>$name</b> : $type
!endprocedure

!procedure Legend()
<style>
legend {
  FontSize 10
  BackGroundColor white
  HorizontalAlignment left
}
</style>
    legend
        <b>LEGEND</b>
        <color:$TABLE><&media-stop></color>    Table
        <color:$PRIMARY_KEY><&key></color>    Primary Key
        <color:$FOREIGN_KEY><&key></color>    Foreign Key
        <color:$COLUMN><&media-record></color>    Column
        <color:$INDEX><&magnifying-glass></color>    Index
        <color:$VIEW><&media-stop></color>    View

        <color:$LEGACY_TABLE><&media-stop></color>    Legacy Table
        <color:$LEGACY_FOREIGN_KEY><&key></color>    Legacy Foreign Key

        <color:$NEW_COLUMN><&media-record></color>    New Column
    endlegend
!endprocedure

@enduml
